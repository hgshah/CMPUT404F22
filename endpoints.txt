---------------------------- POSTS ---------------------
TO CREATE A POST:
POST /authors/{AUTHOR_UUID}/posts/
{
    "title": "test",
    "description": "test",
    "visibility": friend,
    "source": "sourceurl",
    "origin": "originURL",
    "contentType": text/plain,
    "unlisted": false
}

TO GET POSTS BY AN AUTHOR:
GET /authors/{AUTHOR_UUID}/posts?page={INT}&size={INT}

TO GET ALL PUBLIC POSTS:
GET /posts/public

TO DELETE A POST:
You must be logged in as the correct author to delete!
DELETE /authors/{AUTHOR_UUID}/posts/{POST_UUID}/

TO GET A SPECIFIC POST BY SPECIFIC AUTHOR:
GET /authors/{AUTHOR_UUID}/posts/{POST_UUID}/

TO UPDATE A POST:
POST /authors/{AUTHOR_UUID}/posts/{POST_UUID}/
{
    "title": "test",
    "description": "test",
    "visibility": friend,
    "source": "sourceurl",
    "origin": "originURL",
    "contentType": text/plain,
    "unlisted": false
}

TO UPDATE OR CREATE A POST:
PUT /authors/{AUTHOR_UUID}/posts/{POST_UUID}/
{
    "title": "test",
    "description": "test",
    "visibility": friend,
    "source": "sourceurl",
    "origin": "originURL",
    "contentType": text/plain,
    "unlisted": false
}

TO GET A POST'S COMMENTS:
GET /authors/{AUTHOR_UUID}/posts/{POST_UUID}/comments

TO CREATE A COMMENT ON A POST:
POST /authors/{AUTHOR_UUID}/posts/{POST_UUID}/comments
{
    "comment": "test",
    "contentType": text/plain
}


--------------------------
FOLLOWS
===========================

### TO GET ALL FOLLOWERS
GET /authors/{AUTHOR_UUID}/followers

### TO CREATE A FOLLOW REQUEST
```POST /authors/{AUTHOR_UUID}/followers/```

Note that this request assumes that the data is:
```
{
    "actor": {CURRENT_USER},
    "object": {AUTHOR_UUID}
    "has_accepted": false
}
```

### TO GET ALL OUTGOING FOLLOW REQUESTS
```GET /follows/outgoing/```

### TO GET ALL INCOMING FOLLOW REQUESTS
```GET /follows/incoming/```

### TO GET A SPECIFIC FOLLOW REQUEST
```GET /follows/<FOLLOW_UUID>/```

### TO ACCEPT A FOLLOW REQUEST
```
PUT /follows/<FOLLOW_UUID>/
{
    "has_accepted": true
}
```

Note that this request assumes that the data is:
```
{
    "actor": {FOLLOW.ACTOR},
    "object": {CURRENT_USER}
    "has_accepted": true
}
```

If `has_accepted` was false, the server sends back a 400 Bad Request Error.
You have to use DELETE to delete a request.

### TO CANCEL OR DECLINE A SPECIFIC FOLLOW REQUEST
```DELETE /follows/<FOLLOW_UUID>/```

Note that a user can only delete a request if they are either the actor or object.

### TO UNFOLLOW OR REMOVE SOMEONE FOLLOWING YOU
```DELETE /follows/<FOLLOW_UUID>/```

Note that a user can only delete a request if they are either the actor or object.

--------------------------
AUTHORS
==========================
### GET ALL AUTHORS
```GET /authors/```

### GET A SPECIFIC AUTHOR
```GET /authors/{AUTHOR_UUID}/```


--------------------------
REAL FRIENDS
==========================
### GET ALL REAL FRIENDS
```GET /authors/{AUTHOR_UUID}/real-friends/```

--------------------------
LOGIN
==========================
### LOGIN
Request (withCredentials = true):
```POST /tokens/
{
    "username": "username",
    "password": "password"
}
```

Response:
```
{
    "type": "token",
    "token": "TOKEN",
    "author": { /*author object*/ }
}
```

----------------------------------------------------
FRONTEND GUIDE ON HOW TO ACCEPT FRIEND REQUESTS
====================================================

User B wants to follow User A.

1. Logged in User B will request to follow User A
```POST /authors/{USER_A_ID}/followers/```

Note: You don't need a JSON body for this one, but this creates this object in the database:
```
{
    "type", "Follow"
    "id": {FOLLOW_ID}, # generated
    "actor": {USER_B}, # assumed User B
    "object": {USER_A}
    "has_accepted": false
}
```

2. User A logs in and checks the pending follow request they have.
```GET /follows/incoming/```

The client receives a list of follow requests, and it's the frontend's job to display this list.
The object it receive looks like this.
Note 1: This endpoint assumes that these are follow requests only for the logged in user (User A).
```json
{
    "type": "followRequests",
    [
        {
            "type", "Follow",
            "id": {FOLLOW_ID},
            "actor": {USER_B},
            "object": {USER_A}
            "has_accepted": false
        },
        {...},
        ...
    ],
}
```


3. User A can respond to User B's follow request.

3.A. If User A wants to accept the follow request.
```
PUT /follows/<FOLLOW_UUID>/
{
    "has_accepted": true, # <- User A has to explicitly say, yeah, I accept this request
}
```

Note: PUT only works one-way. It cannot make a follower unfollow or decline a request.
You have to DELETE.

3.B. If User A wants to decline the follow request.
```DELETE /follows/<FOLLOW_UUID>/```

4. User B now follows User A. To check:

4.A. Everyone, includingUser A and User B, can now see that User B now appears under User A's followers
```GET /authors/{USER_A_ID}/followers/```

This returns:
```json
{
    "type": "followers",
    "items": [
        {USER B}
    ]
}
```

4.B. The follow request is now gone for User A if you look at the follow request endpoint
```GET /follows/incoming/```

4.B. The follow request is now gone for User B if you look at the follow request endpoint
```GET /follows/outgoing/```
Note: not really in the user story